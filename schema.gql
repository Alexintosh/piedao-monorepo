# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Represents market data denominated in a specific currency."""
type CurrencyDataEntity {
  """The name of the currency (eg: ETH)"""
  currency: String!
  marketCap: Float!
  price: Float!
  volume: Float!
}

"""Contains market information for a given token at a specific timestamp."""
type MarketDataEntity {
  """The currently circulating supply of the token at the given timestamp."""
  circulatingSupply: Int!

  """Price metadata at the given timestamp in all the supported currencies."""
  currencyData: [CurrencyDataEntity!]!

  """The rank of the token at the given timestamp."""
  marketCapRank: Int!

  """The timestamp at which this data was taken."""
  timestamp: Timestamp!
}

input MarketDataFilter {
  limit: Int = 1
  orderBy: [MarketDataOrderBy!]
}

enum MarketDataFilterField {
  timestamp
}

input MarketDataOrderBy {
  field: MarketDataFilterField!
  value: Order!
}

enum Order {
  asc
  desc
}

type Query {
  """Returns all tokens"""
  tokens(filters: TokenFiltersInput!): [TokenEntity!]!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TokenEntity {
  address: String!

  """The chain on which this token lives."""
  chain: String!
  coinGeckoId: String!
  decimals: Float!

  """The kind of this token (eg: 'PieVault', 'YieldVault', etc)."""
  kind: String!

  """Market data for this token."""
  marketData: [MarketDataEntity!]!
  name: String!
  symbol: String!
}

input TokenFiltersInput {
  marketData: MarketDataFilter
  token: MarketDataFilter
}