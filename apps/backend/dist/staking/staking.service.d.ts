import { HttpService } from '@nestjs/axios';
import { Model } from 'mongoose';
import { EpochDocument, EpochEntity } from './entities/epoch.entity';
import { Staker, Lock } from './types/staking.types.Staker';
import { Vote } from './types/staking.types.Vote';
import { FreeRider } from './types/staking.types.FreeRider';
import { Participation } from './types/staking.types.Participation';
import { Delegate } from './types/staking.types.Delegate';
export declare class StakingService {
    private httpService;
    private epochModel;
    private SLICE_ADDRESS;
    private snapshotSpaceID;
    private graphUrl;
    private snapshotUrl;
    private ethProvider;
    constructor(httpService: HttpService, epochModel: Model<EpochDocument>);
    generateEpochCommand(): Promise<void>;
    setEthProvider(provider: string): void;
    getEthProvider(): string;
    setSnapshotUrl(url: string): void;
    getSnapshotUrl(): string;
    getEpochs(startDate?: number): Promise<Array<EpochEntity>>;
    getEpoch(windowIndex?: number): Promise<EpochEntity>;
    getStakers(ids?: Array<string>, blockNumber?: number, condition?: string): Promise<Staker[]>;
    getRewards(windowIndex: number): Promise<any[]>;
    getLocks(lockedAt?: string, ids?: Array<string>): Promise<Lock[]>;
    getDelegates(): Promise<Delegate[]>;
    getParticipations(votes: Vote[], blockNumber: number): Promise<Participation[]>;
    getFreeRiders(month: number, blockNumber: number, proposalsIds: Array<string>): Promise<FreeRider[]>;
    generateEpoch(month: number, year: number, distributedRewards: string, windowIndex: number, prevWindowIndex: number, blockNumber: number, proposalsIds: Array<string>): Promise<EpochEntity>;
    private saveEpoch;
    getSliceBreakdown(): Promise<any>;
    private includeDelegates;
    private fetchDelegates;
    private fetchLocks;
    private fetchStakers;
    private fetchstakingStats;
    private fetchRewards;
    private getSnapshotVotes;
    private fetchSnapshotVotes;
    private generateBackmonthTimestamp;
    private getProposalsFromParticipations;
    private getVotersFromShapshotVotes;
    private getOldestLock;
}
