/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';

export interface YieldvaultAbiInterface extends utils.Interface {
  contractName: 'YieldvaultAbi';

  functions: {
    'VERSION()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'auth()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfUnderlying(address)': FunctionFragment;
    'baseUnit()': FunctionFragment;
    'batchBurnBalance()': FunctionFragment;
    'batchBurnRound()': FunctionFragment;
    'batchBurns(uint256)': FunctionFragment;
    'blocksPerYear()': FunctionFragment;
    'burningFeePercent()': FunctionFragment;
    'burningFeeReceiver()': FunctionFragment;
    'calculateShares(uint256)': FunctionFragment;
    'calculateUnderlying(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'depositIntoStrategy(address,uint256)': FunctionFragment;
    'distrustStrategy(address)': FunctionFragment;
    'enterBatchBurn(uint256)': FunctionFragment;
    'estimatedReturn()': FunctionFragment;
    'exchangeRate()': FunctionFragment;
    'execBatchBurn()': FunctionFragment;
    'exitBatchBurn()': FunctionFragment;
    'getStrategyData(address)': FunctionFragment;
    'getWithdrawalQueue()': FunctionFragment;
    'harvest(address[])': FunctionFragment;
    'harvestDelay()': FunctionFragment;
    'harvestFeePercent()': FunctionFragment;
    'harvestFeeReceiver()': FunctionFragment;
    'harvestWindow()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,address)': FunctionFragment;
    'lastHarvest()': FunctionFragment;
    'lastHarvestExchangeRate()': FunctionFragment;
    'lastHarvestIntervalInBlocks()': FunctionFragment;
    'lastHarvestWindowStart()': FunctionFragment;
    'lastHarvestWindowStartBlock()': FunctionFragment;
    'lockedProfit()': FunctionFragment;
    'maxLockedProfit()': FunctionFragment;
    'name()': FunctionFragment;
    'nextHarvestDelay()': FunctionFragment;
    'paused()': FunctionFragment;
    'setAuth(address)': FunctionFragment;
    'setBlocksPerYear(uint256)': FunctionFragment;
    'setBurningFeePercent(uint256)': FunctionFragment;
    'setBurningFeeReceiver(address)': FunctionFragment;
    'setDepositLimits(uint256,uint256)': FunctionFragment;
    'setHarvestDelay(uint64)': FunctionFragment;
    'setHarvestFeePercent(uint256)': FunctionFragment;
    'setHarvestFeeReceiver(address)': FunctionFragment;
    'setHarvestWindow(uint128)': FunctionFragment;
    'setWithdrawalQueue(address[])': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalFloat()': FunctionFragment;
    'totalStrategyHoldings()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalUnderlying()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'triggerPause()': FunctionFragment;
    'trustStrategy(address)': FunctionFragment;
    'underlying()': FunctionFragment;
    'underlyingDecimals()': FunctionFragment;
    'userBatchBurnReceipts(address)': FunctionFragment;
    'userDepositLimit()': FunctionFragment;
    'vaultDepositLimit()': FunctionFragment;
    'withdrawFromStrategy(address,uint256)': FunctionFragment;
    'withdrawalQueue(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'VERSION'
      | 'VERSION()'
      | 'allowance'
      | 'allowance(address,address)'
      | 'approve'
      | 'approve(address,uint256)'
      | 'auth'
      | 'auth()'
      | 'balanceOf'
      | 'balanceOf(address)'
      | 'balanceOfUnderlying'
      | 'balanceOfUnderlying(address)'
      | 'baseUnit'
      | 'baseUnit()'
      | 'batchBurnBalance'
      | 'batchBurnBalance()'
      | 'batchBurnRound'
      | 'batchBurnRound()'
      | 'batchBurns'
      | 'batchBurns(uint256)'
      | 'blocksPerYear'
      | 'blocksPerYear()'
      | 'burningFeePercent'
      | 'burningFeePercent()'
      | 'burningFeeReceiver'
      | 'burningFeeReceiver()'
      | 'calculateShares'
      | 'calculateShares(uint256)'
      | 'calculateUnderlying'
      | 'calculateUnderlying(uint256)'
      | 'decimals'
      | 'decimals()'
      | 'decreaseAllowance'
      | 'decreaseAllowance(address,uint256)'
      | 'deposit'
      | 'deposit(address,uint256)'
      | 'depositIntoStrategy'
      | 'depositIntoStrategy(address,uint256)'
      | 'distrustStrategy'
      | 'distrustStrategy(address)'
      | 'enterBatchBurn'
      | 'enterBatchBurn(uint256)'
      | 'estimatedReturn'
      | 'estimatedReturn()'
      | 'exchangeRate'
      | 'exchangeRate()'
      | 'execBatchBurn'
      | 'execBatchBurn()'
      | 'exitBatchBurn'
      | 'exitBatchBurn()'
      | 'getStrategyData'
      | 'getStrategyData(address)'
      | 'getWithdrawalQueue'
      | 'getWithdrawalQueue()'
      | 'harvest'
      | 'harvest(address[])'
      | 'harvestDelay'
      | 'harvestDelay()'
      | 'harvestFeePercent'
      | 'harvestFeePercent()'
      | 'harvestFeeReceiver'
      | 'harvestFeeReceiver()'
      | 'harvestWindow'
      | 'harvestWindow()'
      | 'increaseAllowance'
      | 'increaseAllowance(address,uint256)'
      | 'initialize'
      | 'initialize(address,address,address,address)'
      | 'lastHarvest'
      | 'lastHarvest()'
      | 'lastHarvestExchangeRate'
      | 'lastHarvestExchangeRate()'
      | 'lastHarvestIntervalInBlocks'
      | 'lastHarvestIntervalInBlocks()'
      | 'lastHarvestWindowStart'
      | 'lastHarvestWindowStart()'
      | 'lastHarvestWindowStartBlock'
      | 'lastHarvestWindowStartBlock()'
      | 'lockedProfit'
      | 'lockedProfit()'
      | 'maxLockedProfit'
      | 'maxLockedProfit()'
      | 'name'
      | 'name()'
      | 'nextHarvestDelay'
      | 'nextHarvestDelay()'
      | 'paused'
      | 'paused()'
      | 'setAuth'
      | 'setAuth(address)'
      | 'setBlocksPerYear'
      | 'setBlocksPerYear(uint256)'
      | 'setBurningFeePercent'
      | 'setBurningFeePercent(uint256)'
      | 'setBurningFeeReceiver'
      | 'setBurningFeeReceiver(address)'
      | 'setDepositLimits'
      | 'setDepositLimits(uint256,uint256)'
      | 'setHarvestDelay'
      | 'setHarvestDelay(uint64)'
      | 'setHarvestFeePercent'
      | 'setHarvestFeePercent(uint256)'
      | 'setHarvestFeeReceiver'
      | 'setHarvestFeeReceiver(address)'
      | 'setHarvestWindow'
      | 'setHarvestWindow(uint128)'
      | 'setWithdrawalQueue'
      | 'setWithdrawalQueue(address[])'
      | 'symbol'
      | 'symbol()'
      | 'totalFloat'
      | 'totalFloat()'
      | 'totalStrategyHoldings'
      | 'totalStrategyHoldings()'
      | 'totalSupply'
      | 'totalSupply()'
      | 'totalUnderlying'
      | 'totalUnderlying()'
      | 'transfer'
      | 'transfer(address,uint256)'
      | 'transferFrom'
      | 'transferFrom(address,address,uint256)'
      | 'triggerPause'
      | 'triggerPause()'
      | 'trustStrategy'
      | 'trustStrategy(address)'
      | 'underlying'
      | 'underlying()'
      | 'underlyingDecimals'
      | 'underlyingDecimals()'
      | 'userBatchBurnReceipts'
      | 'userBatchBurnReceipts(address)'
      | 'userDepositLimit'
      | 'userDepositLimit()'
      | 'vaultDepositLimit'
      | 'vaultDepositLimit()'
      | 'withdrawFromStrategy'
      | 'withdrawFromStrategy(address,uint256)'
      | 'withdrawalQueue'
      | 'withdrawalQueue(uint256)',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'auth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'auth()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfUnderlying',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfUnderlying(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'baseUnit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'baseUnit()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'batchBurnBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'batchBurnBalance()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'batchBurnRound',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'batchBurnRound()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'batchBurns',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'batchBurns(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'blocksPerYear',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'blocksPerYear()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'burningFeePercent',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'burningFeePercent()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'burningFeeReceiver',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'burningFeeReceiver()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateShares',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateShares(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateUnderlying',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateUnderlying(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decimals()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositIntoStrategy',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositIntoStrategy(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'distrustStrategy',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'distrustStrategy(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'enterBatchBurn',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'enterBatchBurn(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'estimatedReturn',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'estimatedReturn()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exchangeRate',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exchangeRate()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'execBatchBurn',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'execBatchBurn()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exitBatchBurn',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exitBatchBurn()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getStrategyData',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getStrategyData(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getWithdrawalQueue',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getWithdrawalQueue()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'harvest', values: [string[]]): string;
  encodeFunctionData(
    functionFragment: 'harvest(address[])',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestDelay',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestDelay()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFeePercent',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFeePercent()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFeeReceiver',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFeeReceiver()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestWindow',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestWindow()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address,address,address)',
    values: [string, string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvest',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvest()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestExchangeRate',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestExchangeRate()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestIntervalInBlocks',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestIntervalInBlocks()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestWindowStart',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestWindowStart()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestWindowStartBlock',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastHarvestWindowStartBlock()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lockedProfit',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lockedProfit()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'maxLockedProfit',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'maxLockedProfit()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nextHarvestDelay',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nextHarvestDelay()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAuth', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setAuth(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBlocksPerYear',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBlocksPerYear(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBurningFeePercent',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBurningFeePercent(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBurningFeeReceiver',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBurningFeeReceiver(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositLimits',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositLimits(uint256,uint256)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestDelay',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestDelay(uint64)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestFeePercent',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestFeePercent(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestFeeReceiver',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestFeeReceiver(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestWindow',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setHarvestWindow(uint128)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWithdrawalQueue',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWithdrawalQueue(address[])',
    values: [string[]],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalFloat',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalFloat()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalStrategyHoldings',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalStrategyHoldings()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalUnderlying',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalUnderlying()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'triggerPause',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'triggerPause()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'trustStrategy',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'trustStrategy(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'underlying',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'underlying()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingDecimals',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingDecimals()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'userBatchBurnReceipts',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'userBatchBurnReceipts(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'userDepositLimit',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'userDepositLimit()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultDepositLimit',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultDepositLimit()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromStrategy',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromStrategy(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawalQueue',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawalQueue(uint256)',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'allowance(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'approve(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'auth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'auth()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfUnderlying',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfUnderlying(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'baseUnit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseUnit()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'batchBurnBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'batchBurnBalance()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'batchBurnRound',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'batchBurnRound()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'batchBurns', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'batchBurns(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'blocksPerYear',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'blocksPerYear()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningFeePercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningFeePercent()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningFeeReceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningFeeReceiver()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateShares(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateUnderlying',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateUnderlying(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositIntoStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositIntoStrategy(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'distrustStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'distrustStrategy(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enterBatchBurn',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enterBatchBurn(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'estimatedReturn',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'estimatedReturn()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchangeRate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchangeRate()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'execBatchBurn',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'execBatchBurn()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exitBatchBurn',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exitBatchBurn()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStrategyData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStrategyData(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getWithdrawalQueue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getWithdrawalQueue()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'harvest(address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestDelay()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFeePercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFeePercent()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFeeReceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFeeReceiver()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestWindow',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestWindow()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,address,address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvest()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestExchangeRate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestExchangeRate()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestIntervalInBlocks',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestIntervalInBlocks()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestWindowStart',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestWindowStart()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestWindowStartBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastHarvestWindowStartBlock()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lockedProfit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lockedProfit()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxLockedProfit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxLockedProfit()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nextHarvestDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nextHarvestDelay()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuth', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setAuth(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBlocksPerYear',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBlocksPerYear(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBurningFeePercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBurningFeePercent(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBurningFeeReceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBurningFeeReceiver(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositLimits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositLimits(uint256,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestDelay(uint64)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestFeePercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestFeePercent(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestFeeReceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestFeeReceiver(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestWindow',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHarvestWindow(uint128)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setWithdrawalQueue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setWithdrawalQueue(address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalFloat', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalFloat()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalStrategyHoldings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalStrategyHoldings()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalUnderlying',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalUnderlying()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transfer(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom(address,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'triggerPause',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'triggerPause()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'trustStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'trustStrategy(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'underlying()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingDecimals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingDecimals()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userBatchBurnReceipts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userBatchBurnReceipts(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userDepositLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userDepositLimit()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultDepositLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultDepositLimit()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFromStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFromStrategy(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawalQueue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawalQueue(uint256)',
    data: BytesLike,
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'AuthUpdated(address)': EventFragment;
    'BurningFeePercentUpdated(uint256)': EventFragment;
    'BurningFeeReceiverUpdated(address)': EventFragment;
    'Deposit(address,address,uint256)': EventFragment;
    'DepositLimitsUpdated(uint256,uint256)': EventFragment;
    'EnterBatchBurn(uint256,address,uint256)': EventFragment;
    'ExecuteBatchBurn(uint256,address,uint256,uint256)': EventFragment;
    'ExitBatchBurn(uint256,address,uint256)': EventFragment;
    'Harvest(address,address[])': EventFragment;
    'HarvestDelayUpdateScheduled(uint64)': EventFragment;
    'HarvestDelayUpdated(address,uint64)': EventFragment;
    'HarvestFeePercentUpdated(uint256)': EventFragment;
    'HarvestFeeReceiverUpdated(address)': EventFragment;
    'HarvestWindowUpdated(uint128)': EventFragment;
    'Paused(address)': EventFragment;
    'StrategyDeposit(address,address,uint256)': EventFragment;
    'StrategyDistrusted(address)': EventFragment;
    'StrategyTrusted(address)': EventFragment;
    'StrategyWithdrawal(address,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'WithdrawalQueueSet(address[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Approval(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthUpdated(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurningFeePercentUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'BurningFeePercentUpdated(uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurningFeeReceiverUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'BurningFeeReceiverUpdated(address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Deposit(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositLimitsUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DepositLimitsUpdated(uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EnterBatchBurn'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'EnterBatchBurn(uint256,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExecuteBatchBurn'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ExecuteBatchBurn(uint256,address,uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExitBatchBurn'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ExitBatchBurn(uint256,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest(address,address[])'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HarvestDelayUpdateScheduled',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HarvestDelayUpdateScheduled(uint64)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestDelayUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HarvestDelayUpdated(address,uint64)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestFeePercentUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HarvestFeePercentUpdated(uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestFeeReceiverUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HarvestFeeReceiverUpdated(address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestWindowUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HarvestWindowUpdated(uint128)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyDeposit'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'StrategyDeposit(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyDistrusted'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'StrategyDistrusted(address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyTrusted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyTrusted(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyWithdrawal'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'StrategyWithdrawal(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Transfer(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalQueueSet'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'WithdrawalQueueSet(address[])',
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AuthUpdatedEventObject {
  newAuth: string;
}
export type AuthUpdatedEvent = TypedEvent<[string], AuthUpdatedEventObject>;

export type AuthUpdatedEventFilter = TypedEventFilter<AuthUpdatedEvent>;

export interface BurningFeePercentUpdatedEventObject {
  newFeePercent: BigNumber;
}
export type BurningFeePercentUpdatedEvent = TypedEvent<
  [BigNumber],
  BurningFeePercentUpdatedEventObject
>;

export type BurningFeePercentUpdatedEventFilter =
  TypedEventFilter<BurningFeePercentUpdatedEvent>;

export interface BurningFeeReceiverUpdatedEventObject {
  receiver: string;
}
export type BurningFeeReceiverUpdatedEvent = TypedEvent<
  [string],
  BurningFeeReceiverUpdatedEventObject
>;

export type BurningFeeReceiverUpdatedEventFilter =
  TypedEventFilter<BurningFeeReceiverUpdatedEvent>;

export interface DepositEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositLimitsUpdatedEventObject {
  perUser: BigNumber;
  perVault: BigNumber;
}
export type DepositLimitsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositLimitsUpdatedEventObject
>;

export type DepositLimitsUpdatedEventFilter =
  TypedEventFilter<DepositLimitsUpdatedEvent>;

export interface EnterBatchBurnEventObject {
  round: BigNumber;
  account: string;
  amount: BigNumber;
}
export type EnterBatchBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  EnterBatchBurnEventObject
>;

export type EnterBatchBurnEventFilter = TypedEventFilter<EnterBatchBurnEvent>;

export interface ExecuteBatchBurnEventObject {
  round: BigNumber;
  executor: string;
  shares: BigNumber;
  amount: BigNumber;
}
export type ExecuteBatchBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  ExecuteBatchBurnEventObject
>;

export type ExecuteBatchBurnEventFilter =
  TypedEventFilter<ExecuteBatchBurnEvent>;

export interface ExitBatchBurnEventObject {
  round: BigNumber;
  account: string;
  amount: BigNumber;
}
export type ExitBatchBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ExitBatchBurnEventObject
>;

export type ExitBatchBurnEventFilter = TypedEventFilter<ExitBatchBurnEvent>;

export interface HarvestEventObject {
  account: string;
  strategies: string[];
}
export type HarvestEvent = TypedEvent<[string, string[]], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface HarvestDelayUpdateScheduledEventObject {
  newHarvestDelay: BigNumber;
}
export type HarvestDelayUpdateScheduledEvent = TypedEvent<
  [BigNumber],
  HarvestDelayUpdateScheduledEventObject
>;

export type HarvestDelayUpdateScheduledEventFilter =
  TypedEventFilter<HarvestDelayUpdateScheduledEvent>;

export interface HarvestDelayUpdatedEventObject {
  account: string;
  newHarvestDelay: BigNumber;
}
export type HarvestDelayUpdatedEvent = TypedEvent<
  [string, BigNumber],
  HarvestDelayUpdatedEventObject
>;

export type HarvestDelayUpdatedEventFilter =
  TypedEventFilter<HarvestDelayUpdatedEvent>;

export interface HarvestFeePercentUpdatedEventObject {
  newFeePercent: BigNumber;
}
export type HarvestFeePercentUpdatedEvent = TypedEvent<
  [BigNumber],
  HarvestFeePercentUpdatedEventObject
>;

export type HarvestFeePercentUpdatedEventFilter =
  TypedEventFilter<HarvestFeePercentUpdatedEvent>;

export interface HarvestFeeReceiverUpdatedEventObject {
  receiver: string;
}
export type HarvestFeeReceiverUpdatedEvent = TypedEvent<
  [string],
  HarvestFeeReceiverUpdatedEventObject
>;

export type HarvestFeeReceiverUpdatedEventFilter =
  TypedEventFilter<HarvestFeeReceiverUpdatedEvent>;

export interface HarvestWindowUpdatedEventObject {
  newHarvestWindow: BigNumber;
}
export type HarvestWindowUpdatedEvent = TypedEvent<
  [BigNumber],
  HarvestWindowUpdatedEventObject
>;

export type HarvestWindowUpdatedEventFilter =
  TypedEventFilter<HarvestWindowUpdatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StrategyDepositEventObject {
  account: string;
  strategy: string;
  underlyingAmount: BigNumber;
}
export type StrategyDepositEvent = TypedEvent<
  [string, string, BigNumber],
  StrategyDepositEventObject
>;

export type StrategyDepositEventFilter = TypedEventFilter<StrategyDepositEvent>;

export interface StrategyDistrustedEventObject {
  strategy: string;
}
export type StrategyDistrustedEvent = TypedEvent<
  [string],
  StrategyDistrustedEventObject
>;

export type StrategyDistrustedEventFilter =
  TypedEventFilter<StrategyDistrustedEvent>;

export interface StrategyTrustedEventObject {
  strategy: string;
}
export type StrategyTrustedEvent = TypedEvent<
  [string],
  StrategyTrustedEventObject
>;

export type StrategyTrustedEventFilter = TypedEventFilter<StrategyTrustedEvent>;

export interface StrategyWithdrawalEventObject {
  account: string;
  strategy: string;
  underlyingAmount: BigNumber;
}
export type StrategyWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  StrategyWithdrawalEventObject
>;

export type StrategyWithdrawalEventFilter =
  TypedEventFilter<StrategyWithdrawalEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalQueueSetEventObject {
  replacedWithdrawalQueue: string[];
}
export type WithdrawalQueueSetEvent = TypedEvent<
  [string[]],
  WithdrawalQueueSetEventObject
>;

export type WithdrawalQueueSetEventFilter =
  TypedEventFilter<WithdrawalQueueSetEvent>;

export interface YieldvaultAbi extends BaseContract {
  contractName: 'YieldvaultAbi';

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldvaultAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    'VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    auth(overrides?: CallOverrides): Promise<[string]>;

    'auth()'(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'balanceOfUnderlying(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    baseUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'baseUnit()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurnBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    'batchBurnBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurnRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    'batchBurnRound()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        totalShares: BigNumber;
        amountPerShare: BigNumber;
      }
    >;

    'batchBurns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        totalShares: BigNumber;
        amountPerShare: BigNumber;
      }
    >;

    blocksPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    'blocksPerYear()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    burningFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    'burningFeePercent()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    burningFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    'burningFeeReceiver()'(overrides?: CallOverrides): Promise<[string]>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'calculateShares(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'calculateUnderlying(uint256)'(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    'decimals()'(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(address,uint256)'(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'depositIntoStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    distrustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'distrustStrategy(address)'(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'enterBatchBurn(uint256)'(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    estimatedReturn(overrides?: CallOverrides): Promise<[BigNumber]>;

    'estimatedReturn()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    'exchangeRate()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    execBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'execBatchBurn()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    exitBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'exitBatchBurn()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

    'getStrategyData(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

    getWithdrawalQueue(overrides?: CallOverrides): Promise<[string[]]>;

    'getWithdrawalQueue()'(overrides?: CallOverrides): Promise<[string[]]>;

    harvest(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'harvest(address[])'(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    harvestDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    'harvestDelay()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    'harvestFeePercent()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    'harvestFeeReceiver()'(overrides?: CallOverrides): Promise<[string]>;

    harvestWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    'harvestWindow()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'initialize(address,address,address,address)'(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastHarvest()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastHarvestExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastHarvestExchangeRate()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lastHarvestIntervalInBlocks(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'lastHarvestIntervalInBlocks()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lastHarvestWindowStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastHarvestWindowStart()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastHarvestWindowStartBlock(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'lastHarvestWindowStartBlock()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lockedProfit()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxLockedProfit()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    'name()'(overrides?: CallOverrides): Promise<[string]>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    'nextHarvestDelay()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>;

    setAuth(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setAuth(address)'(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setBlocksPerYear(uint256)'(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setBurningFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setBurningFeeReceiver(address)'(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDepositLimits(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setDepositLimits(uint256,uint256)'(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setHarvestDelay(uint64)'(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setHarvestFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setHarvestFeeReceiver(address)'(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setHarvestWindow(uint128)'(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'setWithdrawalQueue(address[])'(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    'symbol()'(overrides?: CallOverrides): Promise<[string]>;

    totalFloat(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalFloat()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStrategyHoldings(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalStrategyHoldings()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnderlying(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalUnderlying()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    triggerPause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'triggerPause()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    trustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'trustStrategy(address)'(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    'underlying()'(overrides?: CallOverrides): Promise<[string]>;

    underlyingDecimals(overrides?: CallOverrides): Promise<[number]>;

    'underlyingDecimals()'(overrides?: CallOverrides): Promise<[number]>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }
    >;

    'userBatchBurnReceipts(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }
    >;

    userDepositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'userDepositLimit()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultDepositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'vaultDepositLimit()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdrawFromStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'withdrawalQueue(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  'VERSION()'(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  auth(overrides?: CallOverrides): Promise<string>;

  'auth()'(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfUnderlying(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'balanceOfUnderlying(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  baseUnit(overrides?: CallOverrides): Promise<BigNumber>;

  'baseUnit()'(overrides?: CallOverrides): Promise<BigNumber>;

  batchBurnBalance(overrides?: CallOverrides): Promise<BigNumber>;

  'batchBurnBalance()'(overrides?: CallOverrides): Promise<BigNumber>;

  batchBurnRound(overrides?: CallOverrides): Promise<BigNumber>;

  'batchBurnRound()'(overrides?: CallOverrides): Promise<BigNumber>;

  batchBurns(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      totalShares: BigNumber;
      amountPerShare: BigNumber;
    }
  >;

  'batchBurns(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      totalShares: BigNumber;
      amountPerShare: BigNumber;
    }
  >;

  blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  'blocksPerYear()'(overrides?: CallOverrides): Promise<BigNumber>;

  burningFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  'burningFeePercent()'(overrides?: CallOverrides): Promise<BigNumber>;

  burningFeeReceiver(overrides?: CallOverrides): Promise<string>;

  'burningFeeReceiver()'(overrides?: CallOverrides): Promise<string>;

  calculateShares(
    underlyingAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'calculateShares(uint256)'(
    underlyingAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateUnderlying(
    sharesAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'calculateUnderlying(uint256)'(
    sharesAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'decimals()'(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    to: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(address,uint256)'(
    to: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositIntoStrategy(
    strategy: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'depositIntoStrategy(address,uint256)'(
    strategy: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  distrustStrategy(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'distrustStrategy(address)'(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enterBatchBurn(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'enterBatchBurn(uint256)'(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  estimatedReturn(overrides?: CallOverrides): Promise<BigNumber>;

  'estimatedReturn()'(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  'exchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

  execBatchBurn(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'execBatchBurn()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  exitBatchBurn(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'exitBatchBurn()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getStrategyData(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

  'getStrategyData(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

  getWithdrawalQueue(overrides?: CallOverrides): Promise<string[]>;

  'getWithdrawalQueue()'(overrides?: CallOverrides): Promise<string[]>;

  harvest(
    strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'harvest(address[])'(
    strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  harvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

  'harvestDelay()'(overrides?: CallOverrides): Promise<BigNumber>;

  harvestFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  'harvestFeePercent()'(overrides?: CallOverrides): Promise<BigNumber>;

  harvestFeeReceiver(overrides?: CallOverrides): Promise<string>;

  'harvestFeeReceiver()'(overrides?: CallOverrides): Promise<string>;

  harvestWindow(overrides?: CallOverrides): Promise<BigNumber>;

  'harvestWindow()'(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    underlying_: string,
    auth_: string,
    harvestFeeReceiver_: string,
    burnFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'initialize(address,address,address,address)'(
    underlying_: string,
    auth_: string,
    harvestFeeReceiver_: string,
    burnFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  'lastHarvest()'(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  'lastHarvestExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestIntervalInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  'lastHarvestIntervalInBlocks()'(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lastHarvestWindowStart(overrides?: CallOverrides): Promise<BigNumber>;

  'lastHarvestWindowStart()'(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestWindowStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  'lastHarvestWindowStartBlock()'(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  'lockedProfit()'(overrides?: CallOverrides): Promise<BigNumber>;

  maxLockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  'maxLockedProfit()'(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  nextHarvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

  'nextHarvestDelay()'(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  setAuth(
    newAuth: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setAuth(address)'(
    newAuth: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBlocksPerYear(
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setBlocksPerYear(uint256)'(
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBurningFeePercent(
    newFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setBurningFeePercent(uint256)'(
    newFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBurningFeeReceiver(
    burningFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setBurningFeeReceiver(address)'(
    burningFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDepositLimits(
    user: BigNumberish,
    vault: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setDepositLimits(uint256,uint256)'(
    user: BigNumberish,
    vault: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestDelay(
    newHarvestDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setHarvestDelay(uint64)'(
    newHarvestDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestFeePercent(
    newFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setHarvestFeePercent(uint256)'(
    newFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestFeeReceiver(
    harvestFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setHarvestFeeReceiver(address)'(
    harvestFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestWindow(
    newHarvestWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setHarvestWindow(uint128)'(
    newHarvestWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalQueue(
    newQueue: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'setWithdrawalQueue(address[])'(
    newQueue: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  totalFloat(overrides?: CallOverrides): Promise<BigNumber>;

  'totalFloat()'(overrides?: CallOverrides): Promise<BigNumber>;

  totalStrategyHoldings(overrides?: CallOverrides): Promise<BigNumber>;

  'totalStrategyHoldings()'(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  'totalUnderlying()'(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  triggerPause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'triggerPause()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  trustStrategy(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'trustStrategy(address)'(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  'underlying()'(overrides?: CallOverrides): Promise<string>;

  underlyingDecimals(overrides?: CallOverrides): Promise<number>;

  'underlyingDecimals()'(overrides?: CallOverrides): Promise<number>;

  userBatchBurnReceipts(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }>;

  'userBatchBurnReceipts(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }>;

  userDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  'userDepositLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

  vaultDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  'vaultDepositLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFromStrategy(
    strategy: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdrawFromStrategy(address,uint256)'(
    strategy: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawalQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'withdrawalQueue(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    'VERSION()'(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    auth(overrides?: CallOverrides): Promise<string>;

    'auth()'(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOfUnderlying(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    baseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    'baseUnit()'(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnBalance(overrides?: CallOverrides): Promise<BigNumber>;

    'batchBurnBalance()'(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnRound(overrides?: CallOverrides): Promise<BigNumber>;

    'batchBurnRound()'(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        totalShares: BigNumber;
        amountPerShare: BigNumber;
      }
    >;

    'batchBurns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        totalShares: BigNumber;
        amountPerShare: BigNumber;
      }
    >;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    'blocksPerYear()'(overrides?: CallOverrides): Promise<BigNumber>;

    burningFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    'burningFeePercent()'(overrides?: CallOverrides): Promise<BigNumber>;

    burningFeeReceiver(overrides?: CallOverrides): Promise<string>;

    'burningFeeReceiver()'(overrides?: CallOverrides): Promise<string>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'calculateShares(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'calculateUnderlying(uint256)'(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'decimals()'(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'deposit(address,uint256)'(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'depositIntoStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    distrustStrategy(
      strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'distrustStrategy(address)'(
      strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'enterBatchBurn(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    estimatedReturn(overrides?: CallOverrides): Promise<BigNumber>;

    'estimatedReturn()'(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    'exchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    execBatchBurn(overrides?: CallOverrides): Promise<void>;

    'execBatchBurn()'(overrides?: CallOverrides): Promise<void>;

    exitBatchBurn(overrides?: CallOverrides): Promise<void>;

    'exitBatchBurn()'(overrides?: CallOverrides): Promise<void>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

    'getStrategyData(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

    getWithdrawalQueue(overrides?: CallOverrides): Promise<string[]>;

    'getWithdrawalQueue()'(overrides?: CallOverrides): Promise<string[]>;

    harvest(strategies: string[], overrides?: CallOverrides): Promise<void>;

    'harvest(address[])'(
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    harvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestDelay()'(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestFeePercent()'(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeeReceiver(overrides?: CallOverrides): Promise<string>;

    'harvestFeeReceiver()'(overrides?: CallOverrides): Promise<string>;

    harvestWindow(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestWindow()'(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,address,address,address)'(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvest()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestIntervalInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestIntervalInBlocks()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastHarvestWindowStart(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestWindowStart()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestWindowStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestWindowStartBlock()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    'lockedProfit()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    'maxLockedProfit()'(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    'nextHarvestDelay()'(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    setAuth(newAuth: string, overrides?: CallOverrides): Promise<void>;

    'setAuth(address)'(
      newAuth: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBlocksPerYear(uint256)'(
      blocks: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBurningFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBurningFeeReceiver(address)'(
      burningFeeReceiver_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositLimits(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setDepositLimits(uint256,uint256)'(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setHarvestDelay(uint64)'(
      newHarvestDelay: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setHarvestFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setHarvestFeeReceiver(address)'(
      harvestFeeReceiver_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setHarvestWindow(uint128)'(
      newHarvestWindow: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'setWithdrawalQueue(address[])'(
      newQueue: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    totalFloat(overrides?: CallOverrides): Promise<BigNumber>;

    'totalFloat()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalStrategyHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    'totalStrategyHoldings()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    'totalUnderlying()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    triggerPause(overrides?: CallOverrides): Promise<void>;

    'triggerPause()'(overrides?: CallOverrides): Promise<void>;

    trustStrategy(strategy: string, overrides?: CallOverrides): Promise<void>;

    'trustStrategy(address)'(
      strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    'underlying()'(overrides?: CallOverrides): Promise<string>;

    underlyingDecimals(overrides?: CallOverrides): Promise<number>;

    'underlyingDecimals()'(overrides?: CallOverrides): Promise<number>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }
    >;

    'userBatchBurnReceipts(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }
    >;

    userDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'userDepositLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'vaultDepositLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdrawFromStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'withdrawalQueue(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;

    'AuthUpdated(address)'(newAuth?: null): AuthUpdatedEventFilter;
    AuthUpdated(newAuth?: null): AuthUpdatedEventFilter;

    'BurningFeePercentUpdated(uint256)'(
      newFeePercent?: null,
    ): BurningFeePercentUpdatedEventFilter;
    BurningFeePercentUpdated(
      newFeePercent?: null,
    ): BurningFeePercentUpdatedEventFilter;

    'BurningFeeReceiverUpdated(address)'(
      receiver?: string | null,
    ): BurningFeeReceiverUpdatedEventFilter;
    BurningFeeReceiverUpdated(
      receiver?: string | null,
    ): BurningFeeReceiverUpdatedEventFilter;

    'Deposit(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): DepositEventFilter;
    Deposit(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): DepositEventFilter;

    'DepositLimitsUpdated(uint256,uint256)'(
      perUser?: null,
      perVault?: null,
    ): DepositLimitsUpdatedEventFilter;
    DepositLimitsUpdated(
      perUser?: null,
      perVault?: null,
    ): DepositLimitsUpdatedEventFilter;

    'EnterBatchBurn(uint256,address,uint256)'(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null,
    ): EnterBatchBurnEventFilter;
    EnterBatchBurn(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null,
    ): EnterBatchBurnEventFilter;

    'ExecuteBatchBurn(uint256,address,uint256,uint256)'(
      round?: BigNumberish | null,
      executor?: string | null,
      shares?: null,
      amount?: null,
    ): ExecuteBatchBurnEventFilter;
    ExecuteBatchBurn(
      round?: BigNumberish | null,
      executor?: string | null,
      shares?: null,
      amount?: null,
    ): ExecuteBatchBurnEventFilter;

    'ExitBatchBurn(uint256,address,uint256)'(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null,
    ): ExitBatchBurnEventFilter;
    ExitBatchBurn(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null,
    ): ExitBatchBurnEventFilter;

    'Harvest(address,address[])'(
      account?: string | null,
      strategies?: null,
    ): HarvestEventFilter;
    Harvest(account?: string | null, strategies?: null): HarvestEventFilter;

    'HarvestDelayUpdateScheduled(uint64)'(
      newHarvestDelay?: null,
    ): HarvestDelayUpdateScheduledEventFilter;
    HarvestDelayUpdateScheduled(
      newHarvestDelay?: null,
    ): HarvestDelayUpdateScheduledEventFilter;

    'HarvestDelayUpdated(address,uint64)'(
      account?: string | null,
      newHarvestDelay?: null,
    ): HarvestDelayUpdatedEventFilter;
    HarvestDelayUpdated(
      account?: string | null,
      newHarvestDelay?: null,
    ): HarvestDelayUpdatedEventFilter;

    'HarvestFeePercentUpdated(uint256)'(
      newFeePercent?: null,
    ): HarvestFeePercentUpdatedEventFilter;
    HarvestFeePercentUpdated(
      newFeePercent?: null,
    ): HarvestFeePercentUpdatedEventFilter;

    'HarvestFeeReceiverUpdated(address)'(
      receiver?: string | null,
    ): HarvestFeeReceiverUpdatedEventFilter;
    HarvestFeeReceiverUpdated(
      receiver?: string | null,
    ): HarvestFeeReceiverUpdatedEventFilter;

    'HarvestWindowUpdated(uint128)'(
      newHarvestWindow?: null,
    ): HarvestWindowUpdatedEventFilter;
    HarvestWindowUpdated(
      newHarvestWindow?: null,
    ): HarvestWindowUpdatedEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'StrategyDeposit(address,address,uint256)'(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null,
    ): StrategyDepositEventFilter;
    StrategyDeposit(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null,
    ): StrategyDepositEventFilter;

    'StrategyDistrusted(address)'(
      strategy?: string | null,
    ): StrategyDistrustedEventFilter;
    StrategyDistrusted(strategy?: string | null): StrategyDistrustedEventFilter;

    'StrategyTrusted(address)'(
      strategy?: string | null,
    ): StrategyTrustedEventFilter;
    StrategyTrusted(strategy?: string | null): StrategyTrustedEventFilter;

    'StrategyWithdrawal(address,address,uint256)'(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null,
    ): StrategyWithdrawalEventFilter;
    StrategyWithdrawal(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null,
    ): StrategyWithdrawalEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'WithdrawalQueueSet(address[])'(
      replacedWithdrawalQueue?: null,
    ): WithdrawalQueueSetEventFilter;
    WithdrawalQueueSet(
      replacedWithdrawalQueue?: null,
    ): WithdrawalQueueSetEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    auth(overrides?: CallOverrides): Promise<BigNumber>;

    'auth()'(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOfUnderlying(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    baseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    'baseUnit()'(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnBalance(overrides?: CallOverrides): Promise<BigNumber>;

    'batchBurnBalance()'(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnRound(overrides?: CallOverrides): Promise<BigNumber>;

    'batchBurnRound()'(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'batchBurns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    'blocksPerYear()'(overrides?: CallOverrides): Promise<BigNumber>;

    burningFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    'burningFeePercent()'(overrides?: CallOverrides): Promise<BigNumber>;

    burningFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    'burningFeeReceiver()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'calculateShares(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'calculateUnderlying(uint256)'(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(address,uint256)'(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'depositIntoStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    distrustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'distrustStrategy(address)'(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'enterBatchBurn(uint256)'(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    estimatedReturn(overrides?: CallOverrides): Promise<BigNumber>;

    'estimatedReturn()'(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    'exchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    execBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'execBatchBurn()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    exitBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'exitBatchBurn()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getStrategyData(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getWithdrawalQueue(overrides?: CallOverrides): Promise<BigNumber>;

    'getWithdrawalQueue()'(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'harvest(address[])'(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    harvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestDelay()'(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestFeePercent()'(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestFeeReceiver()'(overrides?: CallOverrides): Promise<BigNumber>;

    harvestWindow(overrides?: CallOverrides): Promise<BigNumber>;

    'harvestWindow()'(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'initialize(address,address,address,address)'(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvest()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestIntervalInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestIntervalInBlocks()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastHarvestWindowStart(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestWindowStart()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestWindowStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    'lastHarvestWindowStartBlock()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    'lockedProfit()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    'maxLockedProfit()'(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    'nextHarvestDelay()'(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    setAuth(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setAuth(address)'(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setBlocksPerYear(uint256)'(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setBurningFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setBurningFeeReceiver(address)'(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDepositLimits(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setDepositLimits(uint256,uint256)'(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setHarvestDelay(uint64)'(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setHarvestFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setHarvestFeeReceiver(address)'(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setHarvestWindow(uint128)'(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'setWithdrawalQueue(address[])'(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalFloat(overrides?: CallOverrides): Promise<BigNumber>;

    'totalFloat()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalStrategyHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    'totalStrategyHoldings()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    'totalUnderlying()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    triggerPause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'triggerPause()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    trustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'trustStrategy(address)'(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    'underlying()'(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    'underlyingDecimals()'(overrides?: CallOverrides): Promise<BigNumber>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'userBatchBurnReceipts(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'userDepositLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'vaultDepositLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdrawFromStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'withdrawalQueue(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'VERSION()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    auth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'auth()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOfUnderlying(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    baseUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'baseUnit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBurnBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'batchBurnBalance()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    batchBurnRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'batchBurnRound()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'batchBurns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    blocksPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'blocksPerYear()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burningFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'burningFeePercent()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burningFeeReceiver(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'burningFeeReceiver()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'calculateShares(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'calculateUnderlying(uint256)'(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(address,uint256)'(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'depositIntoStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    distrustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'distrustStrategy(address)'(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'enterBatchBurn(uint256)'(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    estimatedReturn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'estimatedReturn()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'exchangeRate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'execBatchBurn()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    exitBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'exitBatchBurn()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getStrategyData(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getWithdrawalQueue(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getWithdrawalQueue()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    harvest(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'harvest(address[])'(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    harvestDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'harvestDelay()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'harvestFeePercent()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    harvestFeeReceiver(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'harvestFeeReceiver()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    harvestWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'harvestWindow()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address,address)'(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastHarvest()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvestExchangeRate(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'lastHarvestExchangeRate()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastHarvestIntervalInBlocks(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'lastHarvestIntervalInBlocks()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastHarvestWindowStart(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'lastHarvestWindowStart()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastHarvestWindowStartBlock(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'lastHarvestWindowStartBlock()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockedProfit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'maxLockedProfit()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nextHarvestDelay()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuth(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setAuth(address)'(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setBlocksPerYear(uint256)'(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setBurningFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setBurningFeeReceiver(address)'(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDepositLimits(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setDepositLimits(uint256,uint256)'(
      user: BigNumberish,
      vault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setHarvestDelay(uint64)'(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setHarvestFeePercent(uint256)'(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setHarvestFeeReceiver(address)'(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setHarvestWindow(uint128)'(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'setWithdrawalQueue(address[])'(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFloat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalFloat()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStrategyHoldings(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'totalStrategyHoldings()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalUnderlying()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    triggerPause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'triggerPause()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    trustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'trustStrategy(address)'(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'underlying()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingDecimals(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'underlyingDecimals()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'userBatchBurnReceipts(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userDepositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'userDepositLimit()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vaultDepositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'vaultDepositLimit()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdrawFromStrategy(address,uint256)'(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'withdrawalQueue(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
